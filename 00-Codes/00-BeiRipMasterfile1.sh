#! /bin/bash

# This script is used to create a masterfile for the BeiRip project. It connects all the scripts that were used to create the data for the BeiRip project.
# go to the BeiRip project folder
cd /data/Unit_LMM/selberherr-group/roch/02_projects/BeiRip/

####################################################################################################
# Part 1: General File preparation and organization
####################################################################################################
# This script prepares the sequencing raw data for the BeiRip project and splits the sequences into the 16S and 18S rRNA gene amplicons. It also splits the fastq and fastqc files generated by the company in corresponding folders.
# If you don't get updated data from the company it is not necessary to run this script again, because the data is already prepared and organized in the folders 02-rawdata/HTS_16S and 02-rawdata/HTS_18S. 

# ./00-Codes/01-BeiRipFilePreparation.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "First bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 2: Quality control of the raw data 16S&18S
####################################################################################################
# This script performs a quality control of the raw data. It uses the program fastqc to check the quality of the raw data. The results are saved in the folder 05-qiime/01-qc. The script also uses the program multiqc to summarize the results of the fastqc analysis. The results are also saved in the folder 01-qc.
# If you don't get updated data from the company it is not necessary to run this script again. 

# ./00-Codes/02-BeiRipQCRaw.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Second bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 3: Adapter removal 16S&18S
####################################################################################################
# This script removes the adapters from the raw data. It uses the program trimmomatic to remove the adapters. The results are saved in the folder 05-qiime/02-noadapt.
# If you don't get updated data from the company it is not necessary to run this script again.

# ./00-Codes/03-BeiRipAdapterRemoval.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Third bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 4: Quality control of the adapter removed data 16S&18S
####################################################################################################
# This script performs a quality control of the adapter removed data. It uses the program fastqc to check the quality of the adapter removed data. The results are saved in the folder 05-qiime/01-qc. The script also uses the program multiqc to summarize the results of the fastqc analysis. The results are also saved in the folder 01-qc.
# If you don't get updated data from the company it is not necessary to run this script again.

# ./00-Codes/04-BeiRipQCNoAdapt.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Fourth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 5a: Quality and length filtering, chimera removal and paired-end merging with DADA2 - detection of optimal truncation length 16S
####################################################################################################
# This script performs a quality and length filtering, chimera removal and paired-end merging with DADA2. It uses the program qiime2 to perform the analysis. The script runs a set of truncation length combinations to determine the optimal truncation length. The results are saved in the folder 05-qiime/HTS_16S/05-trimmingoptions.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/05-16S-BeiRipDADA2TruncationLength.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Fifth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 5b: Quality and length filtering, chimera removal and paired-end merging with DADA2 - detection of optimal truncation length 18S
####################################################################################################
# This script performs a quality and length filtering, chimera removal and paired-end merging with DADA2. It uses the program qiime2 to perform the analysis. The script runs a set of truncation length combinations to determine the optimal truncation length. The results are saved in the folder 05-qiime/HTS_16S/05-trimmingoptions.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/05-18S-BeiRipDADA2TruncationLength.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Fifth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 6a: Quality and length filtering, chimera removal and paired-end merging with DADA2 - optimal truncation length 16S
####################################################################################################
# The output of Part 5a is checked with an R script to determine the optimal truncation length. The results are saved in the folder 05-qiime/HTS_16S/05-trimmingoptions.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.
# The decission is made on plot dada2-trimming-stats-comparison.tiff

# Initialize Conda
CONDA_BASE=$(conda info --base)
source "$CONDA_BASE/etc/profile.d/conda.sh"
# Activate the environment
conda activate r-env-4.3

# Rscript ./00-Codes/06-16S-BeiRipDADA2TruncationLength.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "R script failed"
 #   exit 1
#fi

####################################################################################################
# Part 6b: Quality and length filtering, chimera removal and paired-end merging with DADA2 - optimal truncation length 18S
####################################################################################################
# The output of Part 5b is checked with an R script to determine the optimal truncation length. The results are saved in the folder 05-qiime/HTS_18S/05-trimmingoptions.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.
# The decission is made on plot dada2-trimming-stats-comparison.tiff

# Rscript ./00-Codes/06-18S-BeiRipDADA2TruncationLength.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "R script failed"
 #   exit 1
#fi

####################################################################################################
# Part 7a: Moving and visualizing the raw representative sequences and the raw feature table 16S
####################################################################################################
# This script moves the raw representative sequences and the raw feature table to the folder 05-qiime/HTS_16S/04-asvtable. It also visualizes the raw feature table. The results are saved in the folder 05-qiime/HTS_16S/04-asvtable.
# Based on 6a the truncation length 270 for forward and 210 for reverse reads is used.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/07-16S-BeiRipRawTables.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Seventh bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 7b: Moving and visualizing the raw representative sequences and the raw feature table 18S
####################################################################################################
# This script moves the raw representative sequences and the raw feature table to the folder 05-qiime/HTS_18S/04-asvtable. It also visualizes the raw feature table. The results are saved in the folder 05-qiime/HTS_18S/04-asvtable.
# Based on 6b the truncation length 270 for forward and 210 for reverse reads is used.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/07-18S-BeiRipRawTables.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Seventh bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 8a: Taxonomic classification of the representative sequences 16S
####################################################################################################
# This script performs a taxonomic classification of the representative sequences. It uses the program qiime2 in combination with the greengenes2 2022-10 data base to perform the analysis. The results are saved in the folder 05-qiime/HTS_16S/06-taxonomy.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/08-16S-BeiRipTaxonomyClassification.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Eighth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 8b: Taxonomic classification of the representative sequences 18S
####################################################################################################
# This script performs a taxonomic classification of the representative sequences. It uses the program qiime2 in combination with the silva data base v 138 to perform the analysis. The results are saved in the folder 05-qiime/HTS_18S/06-taxonomy.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/08-18S-BeiRipTaxonomyClassification.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Eighth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 9a: Removing undesirable taxonomy 16S
####################################################################################################
# This script removes the undesirable taxonomy from the representative sequences. The results are saved in the folder 05-qiime/HTS_16S/04-asvtable/02-taxfilt.
# The first step is to remove the chloroplasts, mitochondria and eukaryotic cells, defined by the classifier.
# The second step is to remove the sequences based on blasting them against bovine and human mitochondrial sequences, because not all of them were removed in the first step.
# If you don't get updated data from the company or change the filtering parameters it is not necessary to run this script again.

# ./00-Codes/09-16S-BeiRipTaxonomyFiltering-1.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# This script checks what sequences were removed using blast. The results are saved in the folder 05-qiime/HTS_16S/04-asvtable/02-taxfilt as blastcheck.txt.
# Rscript ./00-Codes/09-16S-BeiRipTaxonomyFiltering-2.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# only unassigned "Bacteria" were removed by this step

# The third step is to remove contaminations based on the decontam software. This script prepares data for the decontam pipeline:
# ./00-Codes/09-16S-BeiRipTaxonomyFiltering-3.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# This script runs the decontam pipeline:
# Rscript ./00-Codes/09-16S-BeiRipTaxonomyFiltering-4-decontam.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# This script re-import the decontam results into qiime2:
# ./00-Codes/09-16S-BeiRipTaxonomyFiltering-5.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi


####################################################################################################
# Part 9b: Removing undesirable taxonomy 18S
####################################################################################################
# This script removes the undesirable taxonomy from the representative sequences. The results are saved in the folder 05-qiime/HTS_18S/04-asvtable/02-taxfilt.
# The filtering is a bit more complicated than for the 16S sequences, because the silva data base is not as well annotated as the greengenes2 data base and with the 18S sequencing a lot of bovine DNA was sequenced as well.
# The first step was to blast the representative sequences against the Bos taurus genome. Hits with >240 bp lenght and more than 97% identity were the features that were removed.

# ./00-Codes/09-18S-BeiRipTaxonomyFiltering-1.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# This script checks what sequences were removed using blast. The results are saved in the folder 05-qiime/HTS_18S/04-asvtable/02-mamfilt as blastcheck.txt.
# Rscript ./00-Codes/09-18S-BeiRipTaxonomyFiltering-2.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# only unassigned "Eukaryota", completly unassigned sequences and a few Archea and Bacteria ASVs were removed by this step

# The second step was to remove all the other sequences that were classified by the database as mammalia.
# ./00-Codes/09-18S-BeiRipTaxonomyFiltering-3.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# Since there were still a lot of Unassigned and unassigned Eukaryota sequences left, I decided to check if these sequences fits to any of the isolated fungal species. 

# ./00-Codes/09-18S-BeiRipTaxonomyFiltering-4.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# Check if there are unassigned sequences that matches the fungal isolates
# Rscript ./00-Codes/09-18S-BeiRipTaxonomyFiltering-5.R

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

# only 1 sequence matches with a fungal isolate (only 93% identity). See 08-blastdb/taxblast.mamfilt.txt

# The third step was to remove everything that was not classified as fungi. 
# ./00-Codes/09-18S-BeiRipTaxonomyFiltering-6.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Ninth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 10a: Create phylogentetic tree 16S
####################################################################################################
# This script creates a phylogenetic tree. It uses the program qiime2 to perform the analysis. The results are saved in the folder 05-qiime/HTS_16S/08-phylogenetictreemafft.

# ./00-Codes/10-16S-BeiRipPhylogeneticTree.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Tenth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 10b: Create phylogentetic tree 18S
####################################################################################################
# This script creates a phylogenetic tree. It uses the program qiime2 to perform the analysis. The results are saved in the folder 05-qiime/HTS_18S/08-phylogenetictreemafft.

# ./00-Codes/10-18S-BeiRipPhylogeneticTree.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Tenth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 11a: Alpha rarefaction 16S
####################################################################################################
# This script performs an alpha rarefaction analysis. It uses the program qiime2 to perform the analysis. The results are saved in the folder 05-qiime/HTS_16S/09-alpha-rarefaction.

# ./00-Codes/11-16S-BeiRipAlphaRarefaction.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Eleventh bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 11b: Alpha rarefaction 18S
####################################################################################################
# This script performs an alpha rarefaction analysis. It uses the program qiime2 to perform the analysis. The results are saved in the folder 05-qiime/HTS_18S/09-alpha-rarefaction.

# ./00-Codes/11-18S-BeiRipAlphaRarefaction.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Eleventh bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 12a: Prepare data for R 16S
####################################################################################################

# ./00-Codes/12-16S-BeiRipPrepForR.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Twelveth bash script failed"
 #   exit 1
#fi

####################################################################################################
# Part 12b: Prepare data for R 18S
####################################################################################################

# ./00-Codes/12-18S-BeiRipPrepForR.sh

# Check if the previous script was successful
#if [ $? -ne 0 ]; then
 #   echo "Twelveth bash script failed"
 #   exit 1
#fi

